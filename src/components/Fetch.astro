<div class="p-5 ">
    <div id="sholat"></div>
    <template id="sholat-template">
      <h3 class="mb-5">üìç<span class="lokasi"></span>, <span class="daerah"></span>, <span class="residensi"></span></h3>
      <div class="mb-5">üìÖ <span class="tanggal"></span></div>
      <div id="countdown" class="mb-5 text-red-400"></div>
      <ul class="flex flex-col gap-4" id="list-sholat"></ul>
    </template>
</div>


<script>
  const fetchJSON = async (url) => (await fetch(url)).json();

const getCityFromCoordinates = async (lat, lon) => {
  try {
    const data = await fetchJSON(`https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`);
    
    const city = data?.address?.city || data?.address?.town || data?.address?.village || "Tidak diketahui";
    const village = data?.address?.village || data?.address?.hamlet || data?.address?.neighbourhood || data?.address?.residential	 || "Tidak diketahui"; // residensi/Kelurahan
    
    return { city, village };
  } catch (error) {
    console.error("Gagal mendapatkan detail lokasi:", error);
    return { city: null, village: null };
  }
};




const getCityId = async (cityName) => {
  try {
    const { data, status } = await fetchJSON("https://api.myquran.com/v2/sholat/kota/semua");
    return status ? data.find(c => c.lokasi.toLowerCase().includes(cityName.toLowerCase()))?.id || null : null;
  } catch (error) {
    console.error("Gagal menemukan ID kota:", error);
    return null;
  }
};

const getNextPrayerTime = (jadwal, nextDayJadwal) => {
  const now = new Date();
  const jadwalSholat = ["imsak", "subuh", "terbit", "dhuha", "dzuhur", "ashar", "maghrib", "isya"];
  
  let previousPrayer = null;
  for (const sholat of jadwalSholat) {
    const [hour, minute] = jadwal[sholat].split(":").map(Number);
    const sholatTime = new Date(now);
    sholatTime.setHours(hour, minute, 0);

    if (sholatTime > now) {
      return { name: previousPrayer, nextName: sholat, time: sholatTime };
    }
    previousPrayer = sholat;
  }

  const [hour, minute] = nextDayJadwal["imsak"].split(":").map(Number);
  const nextPrayerTime = new Date(now);
  nextPrayerTime.setDate(now.getDate() + 1);
  nextPrayerTime.setHours(hour, minute, 0);

  return { name: previousPrayer, nextName: "imsak (besok)", time: nextPrayerTime };
};

const formatTime = (ms) => {
  const totalSeconds = Math.floor(ms / 1000);
  const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, "0");
  const minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, "0");
  const seconds = String(totalSeconds % 60).padStart(2, "0");
  return `${hours}:${minutes}:${seconds}`;
};

// const updateSholatTemplate = (data, jadwal, nextDayJadwal) => {
//   const template = document.getElementById("sholat-template").content.cloneNode(true);
//   Object.entries({ lokasi: data.lokasi, daerah: data.daerah, ...jadwal }).forEach(([key, value]) => {
//     const el = template.querySelector(`.${key}-time`);
//     if (el) el.textContent = value;
//   });

//   const countdownEl = document.createElement("p");
//   countdownEl.id = "countdown";
//   template.appendChild(countdownEl);

//   const container = document.getElementById("sholat");
//   container.innerHTML = "";
//   container.appendChild(template);

//   startCountdown(jadwal, nextDayJadwal);

//   setTimeout(() => {
//   const lokasiEl = document.querySelector(".lokasi");
//   const daerahEl = document.querySelector(".daerah");
//   const tanggalEl = document.querySelector(".tanggal");

//   if (lokasiEl) lokasiEl.textContent = data.lokasi;
//   if (daerahEl) daerahEl.textContent = data.daerah;

//   if (tanggalEl) {
//     const today = new Date();
//     const formattedDate = today.toLocaleDateString("id-ID", {
//       weekday: "long",
//       day: "numeric",
//       month: "long",
//       year: "numeric",
//     });
//     tanggalEl.textContent = formattedDate;
//   }

// }, 500); // Tunggu sebentar agar elemen ada di DOM

// };

const updateSholatTemplate = (data, jadwal, nextDayJadwal) => {
  const { name } = getNextPrayerTime(jadwal, nextDayJadwal); // Dapatkan waktu sholat saat ini

  // Perbarui lokasi dan daerah
  // document.querySelector(".lokasi").textContent = data.lokasi;
  // document.querySelector(".daerah").textContent = data.daerah;

  // Ambil template dan container
  const template = document.getElementById("sholat-template").content.cloneNode(true);
  const listSholat = template.querySelector("#list-sholat");

  // Daftar waktu sholat
  const jadwalSholat = ["imsak", "subuh", "terbit", "dhuha", "dzuhur", "ashar", "maghrib", "isya"];
  
  jadwalSholat.forEach(sholat => {
    const li = document.createElement("li");
    li.className = `p-4 bg-green-200 flex justify-between rounded-lg shadow-sm items-center ${sholat}`;
    
    // Tambahkan highlight jika ini waktu sholat saat ini
    if (sholat === name) {
      li.classList.add("active");
    }

    li.innerHTML = `<strong>${sholat.charAt(0).toUpperCase() + sholat.slice(1)}</strong> <span class="${sholat}-time">${jadwal[sholat]}</span>`;

    // Pindahkan waktu sholat saat ini ke atas
    if (sholat === name) {
      listSholat.prepend(li);
    } else {
      listSholat.appendChild(li);
    }
  });

  // Masukkan template ke dalam container
  const container = document.getElementById("sholat");
  container.innerHTML = "";
  container.appendChild(template);

  // Jalankan countdown
  startCountdown(jadwal, nextDayJadwal);
};


const startCountdown = (jadwal, nextDayJadwal) => {
  const countdownEl = document.getElementById("countdown");

  const updateCountdown = () => {
    const { name, nextName, time } = getNextPrayerTime(jadwal, nextDayJadwal);
    const timeDiff = time - new Date();

    if (timeDiff > 0) {
      countdownEl.innerHTML = `Sebentar lagi masuk waktu <span class="font-bold">${nextName.toUpperCase()}</span> dalam <span class="font-bold">${formatTime(timeDiff)}</span>`;
      updateActivePrayer(name);
    } else {
      location.reload();
    }
  };

  updateCountdown();
  setInterval(updateCountdown, 1000);
};

const updateActivePrayer = (currentPrayer) => {
  const prayerElements = document.querySelectorAll("#list-sholat li");
  prayerElements.forEach(li => {
    li.classList.remove("active");
    if (li.classList.contains(currentPrayer)) {
      li.classList.add("active");
    }
  });
};

const getSholatData = () => {
  const container = document.getElementById("sholat");

  if (!navigator.geolocation) {
    container.innerHTML = "<p>Geolocation tidak didukung.</p>";
    return;
  }

  container.innerHTML = "<div class='loader'></div>";

  navigator.geolocation.getCurrentPosition(async ({ coords: { latitude: lat, longitude: lon } }) => {
    try {
      const { city, village } = await getCityFromCoordinates(lat, lon);
      if (!city) throw new Error("Kota tidak ditemukan.");

      const cityId = await getCityId(city);
      if (!cityId) throw new Error("ID kota tidak ditemukan.");

      const today = new Date().toISOString().split("T")[0];
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      const tomorrowFormatted = tomorrow.toISOString().split("T")[0];

      const [todayData, tomorrowData] = await Promise.all([
        fetchJSON(`https://api.myquran.com/v2/sholat/jadwal/${cityId}/${today}`),
        fetchJSON(`https://api.myquran.com/v2/sholat/jadwal/${cityId}/${tomorrowFormatted}`)
      ]);

      if (!todayData.status || !tomorrowData.status) throw new Error("Gagal mengambil data sholat.");
      
      updateSholatTemplate(todayData.data, todayData.data.jadwal, tomorrowData.data.jadwal);

      // üåç Update elemen HTML dengan kota, daerah, tanggal, dan residensi/kelurahan
      setTimeout(() => {
        document.querySelector(".lokasi").textContent = city;
        document.querySelector(".daerah").textContent = todayData.data.daerah;
        document.querySelector(".residensi").textContent = `${village}`;

        const todayDate = new Date().toLocaleDateString("id-ID", {
          weekday: "long",
          day: "numeric",
          month: "long",
          year: "numeric",
        });
        document.querySelector(".tanggal").textContent = todayDate;
      }, 500);
    } catch (error) {
      console.error("Error:", error);
      container.innerHTML = "<p>Terjadi kesalahan saat mengambil data.</p>";
    }
  }, (error) => {
    console.error("Gagal mendapatkan lokasi:", error);
    container.innerHTML = "<p>Gagal mendeteksi lokasi.</p>";
  });
};




getSholatData();


</script>